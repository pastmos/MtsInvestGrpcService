//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: user_public.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Ru_Mts_Trading_Pub_User_UserPublicServiceClient`, then call methods of this protocol to make API calls.
internal protocol Ru_Mts_Trading_Pub_User_UserPublicServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Ru_Mts_Trading_Pub_User_UserPublicServiceClientInterceptorFactoryProtocol? { get }

  func getUser(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Ru_Mts_Trading_Pub_User_PublicUser>

  func getMtsbDialog(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Ru_Mts_Trading_Pub_User_MtsbDialogResponse>

  func declineMtsbDialog(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>

  func getMtsbUserData(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Ru_Mts_Trading_Pub_User_PublicUser>
}

extension Ru_Mts_Trading_Pub_User_UserPublicServiceClientProtocol {
  internal var serviceName: String {
    return "ru.mts.trading.pub.user.UserPublicService"
  }

  /// Unary call to getUser
  ///
  /// - Parameters:
  ///   - request: Request to send to getUser.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getUser(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Ru_Mts_Trading_Pub_User_PublicUser> {
    return self.makeUnaryCall(
      path: "/ru.mts.trading.pub.user.UserPublicService/getUser",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetUserInterceptors() ?? []
    )
  }

  ///*
  ///информация для показа диалога получения данных из мтсб
  ///
  /// - Parameters:
  ///   - request: Request to send to getMtsbDialog.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getMtsbDialog(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Ru_Mts_Trading_Pub_User_MtsbDialogResponse> {
    return self.makeUnaryCall(
      path: "/ru.mts.trading.pub.user.UserPublicService/getMtsbDialog",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetMtsbDialogInterceptors() ?? []
    )
  }

  ///*
  ///фиксирует отказ пользователя получать данные из мтсб
  ///
  /// - Parameters:
  ///   - request: Request to send to declineMtsbDialog.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func declineMtsbDialog(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/ru.mts.trading.pub.user.UserPublicService/declineMtsbDialog",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makedeclineMtsbDialogInterceptors() ?? []
    )
  }

  ///*
  ///данные пользователя из мтсб, выбрасывает исключение если MtsbDialogResponse#showMtsBankFormDialog = false
  ///
  /// - Parameters:
  ///   - request: Request to send to getMtsbUserData.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getMtsbUserData(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Ru_Mts_Trading_Pub_User_PublicUser> {
    return self.makeUnaryCall(
      path: "/ru.mts.trading.pub.user.UserPublicService/getMtsbUserData",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetMtsbUserDataInterceptors() ?? []
    )
  }
}

internal protocol Ru_Mts_Trading_Pub_User_UserPublicServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'getUser'.
  func makegetUserInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Ru_Mts_Trading_Pub_User_PublicUser>]

  /// - Returns: Interceptors to use when invoking 'getMtsbDialog'.
  func makegetMtsbDialogInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Ru_Mts_Trading_Pub_User_MtsbDialogResponse>]

  /// - Returns: Interceptors to use when invoking 'declineMtsbDialog'.
  func makedeclineMtsbDialogInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'getMtsbUserData'.
  func makegetMtsbUserDataInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Ru_Mts_Trading_Pub_User_PublicUser>]
}

internal final class Ru_Mts_Trading_Pub_User_UserPublicServiceClient: Ru_Mts_Trading_Pub_User_UserPublicServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Ru_Mts_Trading_Pub_User_UserPublicServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the ru.mts.trading.pub.user.UserPublicService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ru_Mts_Trading_Pub_User_UserPublicServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

