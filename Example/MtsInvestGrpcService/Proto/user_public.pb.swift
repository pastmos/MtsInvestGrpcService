// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: user_public.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///* - обязательное поле
struct Ru_Mts_Trading_Pub_User_PublicUser {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///* id пользователя (GUID).
  var id: GrpcUserId {
    get {return _storage._id ?? GrpcUserId()}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {_uniqueStorage()._id = nil}

  ///* номер телефона в формате 89XXXXXXXXX.
  var phone: String {
    get {return _storage._phone}
    set {_uniqueStorage()._phone = newValue}
  }

  ///* адрес электронной почты.
  var email: String {
    get {return _storage._email}
    set {_uniqueStorage()._email = newValue}
  }

  ///ИНН
  var taxID: String {
    get {return _storage._taxID}
    set {_uniqueStorage()._taxID = newValue}
  }

  ///СНИЛС
  var insuranceAccountID: String {
    get {return _storage._insuranceAccountID}
    set {_uniqueStorage()._insuranceAccountID = newValue}
  }

  ///ФИО
  var name: Ru_Mts_Trading_Pub_User_PersonName {
    get {return _storage._name ?? Ru_Mts_Trading_Pub_User_PersonName()}
    set {_uniqueStorage()._name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {_uniqueStorage()._name = nil}

  ///паспортные данные
  var passport: Ru_Mts_Trading_Pub_User_Passport {
    get {return _storage._passport ?? Ru_Mts_Trading_Pub_User_Passport()}
    set {_uniqueStorage()._passport = newValue}
  }
  /// Returns true if `passport` has been explicitly set.
  var hasPassport: Bool {return _storage._passport != nil}
  /// Clears the value of `passport`. Subsequent reads from it will return its default value.
  mutating func clearPassport() {_uniqueStorage()._passport = nil}

  ///адреса
  var contactInfo: Ru_Mts_Trading_Pub_User_ContactInfo {
    get {return _storage._contactInfo ?? Ru_Mts_Trading_Pub_User_ContactInfo()}
    set {_uniqueStorage()._contactInfo = newValue}
  }
  /// Returns true if `contactInfo` has been explicitly set.
  var hasContactInfo: Bool {return _storage._contactInfo != nil}
  /// Clears the value of `contactInfo`. Subsequent reads from it will return its default value.
  mutating func clearContactInfo() {_uniqueStorage()._contactInfo = nil}

  ///пол
  var gender: String {
    get {return _storage._gender}
    set {_uniqueStorage()._gender = newValue}
  }

  ///место рождения
  var birthPlace: String {
    get {return _storage._birthPlace}
    set {_uniqueStorage()._birthPlace = newValue}
  }

  ///дата рождения
  var birthDay: GrpcOptionalDate {
    get {return _storage._birthDay ?? GrpcOptionalDate()}
    set {_uniqueStorage()._birthDay = newValue}
  }
  /// Returns true if `birthDay` has been explicitly set.
  var hasBirthDay: Bool {return _storage._birthDay != nil}
  /// Clears the value of `birthDay`. Subsequent reads from it will return its default value.
  mutating func clearBirthDay() {_uniqueStorage()._birthDay = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Ru_Mts_Trading_Pub_User_PersonName {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///имя
  var firstName: String = String()

  ///отчество
  var patronymic: String = String()

  ///фамилия
  var lastName: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Ru_Mts_Trading_Pub_User_Passport {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///серия паспорта
  var idSeries: String {
    get {return _storage._idSeries}
    set {_uniqueStorage()._idSeries = newValue}
  }

  ///номер паспорта
  var idNum: String {
    get {return _storage._idNum}
    set {_uniqueStorage()._idNum = newValue}
  }

  ///кем выдан
  var issuedBy: String {
    get {return _storage._issuedBy}
    set {_uniqueStorage()._issuedBy = newValue}
  }

  ///код подразделения
  var issuedByCode: String {
    get {return _storage._issuedByCode}
    set {_uniqueStorage()._issuedByCode = newValue}
  }

  ///дата выдачи
  var issueDate: GrpcOptionalDate {
    get {return _storage._issueDate ?? GrpcOptionalDate()}
    set {_uniqueStorage()._issueDate = newValue}
  }
  /// Returns true if `issueDate` has been explicitly set.
  var hasIssueDate: Bool {return _storage._issueDate != nil}
  /// Clears the value of `issueDate`. Subsequent reads from it will return its default value.
  mutating func clearIssueDate() {_uniqueStorage()._issueDate = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Ru_Mts_Trading_Pub_User_ContactInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///адрес регистрации
  var registrationAddress: Ru_Mts_Trading_Pub_User_Address {
    get {return _storage._registrationAddress ?? Ru_Mts_Trading_Pub_User_Address()}
    set {_uniqueStorage()._registrationAddress = newValue}
  }
  /// Returns true if `registrationAddress` has been explicitly set.
  var hasRegistrationAddress: Bool {return _storage._registrationAddress != nil}
  /// Clears the value of `registrationAddress`. Subsequent reads from it will return its default value.
  mutating func clearRegistrationAddress() {_uniqueStorage()._registrationAddress = nil}

  ///фактический адрес
  var realLifeAddress: Ru_Mts_Trading_Pub_User_Address {
    get {return _storage._realLifeAddress ?? Ru_Mts_Trading_Pub_User_Address()}
    set {_uniqueStorage()._realLifeAddress = newValue}
  }
  /// Returns true if `realLifeAddress` has been explicitly set.
  var hasRealLifeAddress: Bool {return _storage._realLifeAddress != nil}
  /// Clears the value of `realLifeAddress`. Subsequent reads from it will return its default value.
  mutating func clearRealLifeAddress() {_uniqueStorage()._realLifeAddress = nil}

  ///почтовый адрес
  var postAddress: Ru_Mts_Trading_Pub_User_Address {
    get {return _storage._postAddress ?? Ru_Mts_Trading_Pub_User_Address()}
    set {_uniqueStorage()._postAddress = newValue}
  }
  /// Returns true if `postAddress` has been explicitly set.
  var hasPostAddress: Bool {return _storage._postAddress != nil}
  /// Clears the value of `postAddress`. Subsequent reads from it will return its default value.
  mutating func clearPostAddress() {_uniqueStorage()._postAddress = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Ru_Mts_Trading_Pub_User_Address {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///адрес одной строкой
  var unrestrictedValue: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Ru_Mts_Trading_Pub_User_MtsbDialogResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///показывать ли диалог загрузки данных из мтсб (ранее не подавал анкету + есть данные в мтсб + не отказывался)
  var showMtsBankFormDialog: Bool = false

  ///если показывать диалог - имя пользователя в мтсб
  var mtsBankFormName: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "ru.mts.trading.pub.user"

extension Ru_Mts_Trading_Pub_User_PublicUser: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PublicUser"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "phone"),
    3: .same(proto: "email"),
    4: .same(proto: "taxId"),
    5: .same(proto: "insuranceAccountId"),
    6: .same(proto: "name"),
    7: .same(proto: "passport"),
    8: .same(proto: "contactInfo"),
    9: .same(proto: "gender"),
    10: .same(proto: "birthPlace"),
    11: .same(proto: "birthDay"),
  ]

  fileprivate class _StorageClass {
    var _id: GrpcUserId? = nil
    var _phone: String = String()
    var _email: String = String()
    var _taxID: String = String()
    var _insuranceAccountID: String = String()
    var _name: Ru_Mts_Trading_Pub_User_PersonName? = nil
    var _passport: Ru_Mts_Trading_Pub_User_Passport? = nil
    var _contactInfo: Ru_Mts_Trading_Pub_User_ContactInfo? = nil
    var _gender: String = String()
    var _birthPlace: String = String()
    var _birthDay: GrpcOptionalDate? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _phone = source._phone
      _email = source._email
      _taxID = source._taxID
      _insuranceAccountID = source._insuranceAccountID
      _name = source._name
      _passport = source._passport
      _contactInfo = source._contactInfo
      _gender = source._gender
      _birthPlace = source._birthPlace
      _birthDay = source._birthDay
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._phone)
        case 3: try decoder.decodeSingularStringField(value: &_storage._email)
        case 4: try decoder.decodeSingularStringField(value: &_storage._taxID)
        case 5: try decoder.decodeSingularStringField(value: &_storage._insuranceAccountID)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._name)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._passport)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._contactInfo)
        case 9: try decoder.decodeSingularStringField(value: &_storage._gender)
        case 10: try decoder.decodeSingularStringField(value: &_storage._birthPlace)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._birthDay)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._phone.isEmpty {
        try visitor.visitSingularStringField(value: _storage._phone, fieldNumber: 2)
      }
      if !_storage._email.isEmpty {
        try visitor.visitSingularStringField(value: _storage._email, fieldNumber: 3)
      }
      if !_storage._taxID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._taxID, fieldNumber: 4)
      }
      if !_storage._insuranceAccountID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._insuranceAccountID, fieldNumber: 5)
      }
      if let v = _storage._name {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._passport {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._contactInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if !_storage._gender.isEmpty {
        try visitor.visitSingularStringField(value: _storage._gender, fieldNumber: 9)
      }
      if !_storage._birthPlace.isEmpty {
        try visitor.visitSingularStringField(value: _storage._birthPlace, fieldNumber: 10)
      }
      if let v = _storage._birthDay {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ru_Mts_Trading_Pub_User_PublicUser, rhs: Ru_Mts_Trading_Pub_User_PublicUser) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._phone != rhs_storage._phone {return false}
        if _storage._email != rhs_storage._email {return false}
        if _storage._taxID != rhs_storage._taxID {return false}
        if _storage._insuranceAccountID != rhs_storage._insuranceAccountID {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._passport != rhs_storage._passport {return false}
        if _storage._contactInfo != rhs_storage._contactInfo {return false}
        if _storage._gender != rhs_storage._gender {return false}
        if _storage._birthPlace != rhs_storage._birthPlace {return false}
        if _storage._birthDay != rhs_storage._birthDay {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ru_Mts_Trading_Pub_User_PersonName: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PersonName"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "firstName"),
    2: .same(proto: "patronymic"),
    3: .same(proto: "lastName"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.firstName)
      case 2: try decoder.decodeSingularStringField(value: &self.patronymic)
      case 3: try decoder.decodeSingularStringField(value: &self.lastName)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.firstName.isEmpty {
      try visitor.visitSingularStringField(value: self.firstName, fieldNumber: 1)
    }
    if !self.patronymic.isEmpty {
      try visitor.visitSingularStringField(value: self.patronymic, fieldNumber: 2)
    }
    if !self.lastName.isEmpty {
      try visitor.visitSingularStringField(value: self.lastName, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ru_Mts_Trading_Pub_User_PersonName, rhs: Ru_Mts_Trading_Pub_User_PersonName) -> Bool {
    if lhs.firstName != rhs.firstName {return false}
    if lhs.patronymic != rhs.patronymic {return false}
    if lhs.lastName != rhs.lastName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ru_Mts_Trading_Pub_User_Passport: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Passport"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "idSeries"),
    2: .same(proto: "idNum"),
    3: .same(proto: "issuedBy"),
    4: .same(proto: "issuedByCode"),
    5: .same(proto: "issueDate"),
  ]

  fileprivate class _StorageClass {
    var _idSeries: String = String()
    var _idNum: String = String()
    var _issuedBy: String = String()
    var _issuedByCode: String = String()
    var _issueDate: GrpcOptionalDate? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _idSeries = source._idSeries
      _idNum = source._idNum
      _issuedBy = source._issuedBy
      _issuedByCode = source._issuedByCode
      _issueDate = source._issueDate
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._idSeries)
        case 2: try decoder.decodeSingularStringField(value: &_storage._idNum)
        case 3: try decoder.decodeSingularStringField(value: &_storage._issuedBy)
        case 4: try decoder.decodeSingularStringField(value: &_storage._issuedByCode)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._issueDate)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._idSeries.isEmpty {
        try visitor.visitSingularStringField(value: _storage._idSeries, fieldNumber: 1)
      }
      if !_storage._idNum.isEmpty {
        try visitor.visitSingularStringField(value: _storage._idNum, fieldNumber: 2)
      }
      if !_storage._issuedBy.isEmpty {
        try visitor.visitSingularStringField(value: _storage._issuedBy, fieldNumber: 3)
      }
      if !_storage._issuedByCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._issuedByCode, fieldNumber: 4)
      }
      if let v = _storage._issueDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ru_Mts_Trading_Pub_User_Passport, rhs: Ru_Mts_Trading_Pub_User_Passport) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._idSeries != rhs_storage._idSeries {return false}
        if _storage._idNum != rhs_storage._idNum {return false}
        if _storage._issuedBy != rhs_storage._issuedBy {return false}
        if _storage._issuedByCode != rhs_storage._issuedByCode {return false}
        if _storage._issueDate != rhs_storage._issueDate {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ru_Mts_Trading_Pub_User_ContactInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ContactInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "registrationAddress"),
    3: .same(proto: "realLifeAddress"),
    4: .same(proto: "postAddress"),
  ]

  fileprivate class _StorageClass {
    var _registrationAddress: Ru_Mts_Trading_Pub_User_Address? = nil
    var _realLifeAddress: Ru_Mts_Trading_Pub_User_Address? = nil
    var _postAddress: Ru_Mts_Trading_Pub_User_Address? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _registrationAddress = source._registrationAddress
      _realLifeAddress = source._realLifeAddress
      _postAddress = source._postAddress
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2: try decoder.decodeSingularMessageField(value: &_storage._registrationAddress)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._realLifeAddress)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._postAddress)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._registrationAddress {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._realLifeAddress {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._postAddress {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ru_Mts_Trading_Pub_User_ContactInfo, rhs: Ru_Mts_Trading_Pub_User_ContactInfo) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._registrationAddress != rhs_storage._registrationAddress {return false}
        if _storage._realLifeAddress != rhs_storage._realLifeAddress {return false}
        if _storage._postAddress != rhs_storage._postAddress {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ru_Mts_Trading_Pub_User_Address: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Address"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "unrestrictedValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.unrestrictedValue)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.unrestrictedValue.isEmpty {
      try visitor.visitSingularStringField(value: self.unrestrictedValue, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ru_Mts_Trading_Pub_User_Address, rhs: Ru_Mts_Trading_Pub_User_Address) -> Bool {
    if lhs.unrestrictedValue != rhs.unrestrictedValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ru_Mts_Trading_Pub_User_MtsbDialogResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MtsbDialogResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "showMtsBankFormDialog"),
    2: .same(proto: "mtsBankFormName"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.showMtsBankFormDialog)
      case 2: try decoder.decodeSingularStringField(value: &self.mtsBankFormName)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.showMtsBankFormDialog != false {
      try visitor.visitSingularBoolField(value: self.showMtsBankFormDialog, fieldNumber: 1)
    }
    if !self.mtsBankFormName.isEmpty {
      try visitor.visitSingularStringField(value: self.mtsBankFormName, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ru_Mts_Trading_Pub_User_MtsbDialogResponse, rhs: Ru_Mts_Trading_Pub_User_MtsbDialogResponse) -> Bool {
    if lhs.showMtsBankFormDialog != rhs.showMtsBankFormDialog {return false}
    if lhs.mtsBankFormName != rhs.mtsBankFormName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
