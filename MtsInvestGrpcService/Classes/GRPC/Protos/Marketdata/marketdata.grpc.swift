//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: marketdata.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Ru_Mts_Trading_Marketdata_MarketDataServiceClient`, then call methods of this protocol to make API calls.
internal protocol Ru_Mts_Trading_Marketdata_MarketDataServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Ru_Mts_Trading_Marketdata_MarketDataServiceClientInterceptorFactoryProtocol? { get }

  func getMarketData(
    _ request: Ru_Mts_Trading_Marketdata_MarketDataRequest,
    callOptions: CallOptions?,
    handler: @escaping (Ru_Mts_Trading_Marketdata_MarketDataResponse) -> Void
  ) -> ServerStreamingCall<Ru_Mts_Trading_Marketdata_MarketDataRequest, Ru_Mts_Trading_Marketdata_MarketDataResponse>

  func getIndicators(
    _ request: Ru_Mts_Trading_Marketdata_GetIndicatorsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ru_Mts_Trading_Marketdata_GetIndicatorsRequest, Ru_Mts_Trading_Marketdata_GetIndicatorsResponse>

  func getMDForPeriod(
    _ request: Ru_Mts_Trading_Marketdata_GetMDForPeriodRequest,
    callOptions: CallOptions?,
    handler: @escaping (Ru_Mts_Trading_Marketdata_MarketDataResponse) -> Void
  ) -> ServerStreamingCall<Ru_Mts_Trading_Marketdata_GetMDForPeriodRequest, Ru_Mts_Trading_Marketdata_MarketDataResponse>
}

extension Ru_Mts_Trading_Marketdata_MarketDataServiceClientProtocol {
  internal var serviceName: String {
    return "ru.mts.trading.marketdata.MarketDataService"
  }

  /// Server streaming call to GetMarketData
  ///
  /// - Parameters:
  ///   - request: Request to send to GetMarketData.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func getMarketData(
    _ request: Ru_Mts_Trading_Marketdata_MarketDataRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Ru_Mts_Trading_Marketdata_MarketDataResponse) -> Void
  ) -> ServerStreamingCall<Ru_Mts_Trading_Marketdata_MarketDataRequest, Ru_Mts_Trading_Marketdata_MarketDataResponse> {
    return self.makeServerStreamingCall(
      path: "/ru.mts.trading.marketdata.MarketDataService/GetMarketData",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMarketDataInterceptors() ?? [],
      handler: handler
    )
  }

  /// Unary call to GetIndicators
  ///
  /// - Parameters:
  ///   - request: Request to send to GetIndicators.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getIndicators(
    _ request: Ru_Mts_Trading_Marketdata_GetIndicatorsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ru_Mts_Trading_Marketdata_GetIndicatorsRequest, Ru_Mts_Trading_Marketdata_GetIndicatorsResponse> {
    return self.makeUnaryCall(
      path: "/ru.mts.trading.marketdata.MarketDataService/GetIndicators",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetIndicatorsInterceptors() ?? []
    )
  }

  /// Server streaming call to GetMDForPeriod
  ///
  /// - Parameters:
  ///   - request: Request to send to GetMDForPeriod.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func getMDForPeriod(
    _ request: Ru_Mts_Trading_Marketdata_GetMDForPeriodRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Ru_Mts_Trading_Marketdata_MarketDataResponse) -> Void
  ) -> ServerStreamingCall<Ru_Mts_Trading_Marketdata_GetMDForPeriodRequest, Ru_Mts_Trading_Marketdata_MarketDataResponse> {
    return self.makeServerStreamingCall(
      path: "/ru.mts.trading.marketdata.MarketDataService/GetMDForPeriod",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMDForPeriodInterceptors() ?? [],
      handler: handler
    )
  }
}

internal protocol Ru_Mts_Trading_Marketdata_MarketDataServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'getMarketData'.
  func makeGetMarketDataInterceptors() -> [ClientInterceptor<Ru_Mts_Trading_Marketdata_MarketDataRequest, Ru_Mts_Trading_Marketdata_MarketDataResponse>]

  /// - Returns: Interceptors to use when invoking 'getIndicators'.
  func makeGetIndicatorsInterceptors() -> [ClientInterceptor<Ru_Mts_Trading_Marketdata_GetIndicatorsRequest, Ru_Mts_Trading_Marketdata_GetIndicatorsResponse>]

  /// - Returns: Interceptors to use when invoking 'getMDForPeriod'.
  func makeGetMDForPeriodInterceptors() -> [ClientInterceptor<Ru_Mts_Trading_Marketdata_GetMDForPeriodRequest, Ru_Mts_Trading_Marketdata_MarketDataResponse>]
}

internal final class Ru_Mts_Trading_Marketdata_MarketDataServiceClient: Ru_Mts_Trading_Marketdata_MarketDataServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Ru_Mts_Trading_Marketdata_MarketDataServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the ru.mts.trading.marketdata.MarketDataService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ru_Mts_Trading_Marketdata_MarketDataServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

